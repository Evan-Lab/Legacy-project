name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' && startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction --no-root --with dev

      - name: Install project
        run: poetry install --no-interaction

      - name: Run tests before release
        run: poetry run pytest tests/ --cov=src

      - name: Build Python package
        run: poetry build

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Récupère le dernier tag précédent
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -A1 "${GITHUB_REF#refs/tags/}" | tail -1)

          if [ -z "$PREVIOUS_TAG" ]; then
            # Premier tag, récupère tous les commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Récupère les commits depuis le dernier tag
            CHANGELOG=$(git log ${PREVIOUS_TAG}..${GITHUB_REF#refs/tags/} --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Sauvegarde le changelog dans un fichier
          echo "$CHANGELOG" > CHANGELOG.txt

          # Compte le nombre de commits
          COMMIT_COUNT=$(echo "$CHANGELOG" | wc -l)
          echo "COMMIT_COUNT=$COMMIT_COUNT" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ steps.get_version.outputs.VERSION }}
          body_path: CHANGELOG.txt
          draft: false
          prerelease: false
          files: |
            dist/*.whl
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-${{ steps.get_version.outputs.VERSION }}
          path: dist/
          retention-days: 90
